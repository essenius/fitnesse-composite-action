name: 'FitNesse Test Run'
description: 'Run a FitNesse test or suite'
inputs:
  test-spec:
    description: 'Test specification'
    required: true
    default: 'FibonacciTest?test'
  fixture-folder:
    description: the folder where the fixture assemblies and config.xml reside"
    required: true
    default: .
  include-html:
    description: 'Whether or not to include HTML in the test result'
    required: false
    default: true
  fitnesse-port:
    description: 'FitNesse Wiki port'
    required: false
    default: 8080
  fitnesse-release:
    description: 'FitNesse release number'
    required: false
    default: 20220319
  fitsharp-release:
    description: 'FitSharp release number'
    required: false
    default: 2022.3.29
  fitsharp-folder:
    description: 'FitSharp Folder'
    required: false
    default: ${{github.workspace}}/fitsharp
  test-result-folder:
    description: 'Folder of test results'
    required: false
    default: ${{github.workspace}}/testresult
  test-result-artifact:
    description: 'Name of the test result artifact'
    required: false
    default: 'test-result'
runs:
  using: "composite"
  steps:
    - name: Download FitNesse
      shell: bash
      run: curl -o ${{github.workspace}}/fitnesse.jar "http://www.fitnesse.org/fitnesse-standalone.jar?responder=releaseDownload&release=${{inputs.fitnesse-release}}"
    #  assumes that dotnet is already there
    - name: Download FitSharp
      shell: bash
      if: ${{inputs.fitsharp-release}} != ""
      run: |
        mkdir -p ${{inputs.fitsharp-folder}}
        cd ${{runner.temp}}
        dotnet new classlib
        dotnet add package fitsharp --version ${{inputs.fitsharp-release}} --package-directory .
        cp -R fitsharp/${{inputs.fitsharp-release}}/lib/* ${{inputs.fitsharp-folder}}
        rm -rf ./*
    - name: Run test
      shell: bash
      env:
        # tried doing this via $GITHUB_ENV but could not get that to work
        FITSHARP_FOLDER: ${{inputs.fitsharp-folder}}
      run: |
        mkdir -p ${{inputs.test-result-folder}}
        cd ${{inputs.fixture-folder}}
        includeHtml=""
        if [ "${{inputs.include-html}}" == true ]; then
          includeHtml="&includehtml"
        fi
        java -jar ${{github.workspace}}/fitnesse.jar -p ${{inputs.fitnesse-port}} -d ${{github.workspace}} -e 0 -o -c "${{inputs.test-spec}}&format=xml&nochunk$includeHtml" 1>${{inputs.test-result-folder}}/result.xml 2>${{inputs.test-result-folder}}/error.log
        cd ${{github.workspace}}
    - name: Convert Test Output
      shell: pwsh
      working-directory: ${{inputs.test-result-folder}}
      if: always()
      run: ${{ github.action_path }}/ConvertResult.ps1
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{inputs.test-result-artifact}}
        path: ${{inputs.test-result-folder}}
